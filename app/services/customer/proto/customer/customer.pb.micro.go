// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: customer.proto

package customer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CustomerService service

func NewCustomerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "CustomerService.Register",
			Path:    []string{"/api/v1/user/register"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "CustomerService.Login",
			Path:    []string{"/api/v1/user/login"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for CustomerService service

type CustomerService interface {
	// 用户注册
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	// 用户登录
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
}

type customerService struct {
	c    client.Client
	name string
}

func NewCustomerService(name string, c client.Client) CustomerService {
	return &customerService{
		c:    c,
		name: name,
	}
}

func (c *customerService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomerService service

type CustomerServiceHandler interface {
	// 用户注册
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	// 用户登录
	Login(context.Context, *LoginRequest, *LoginResponse) error
}

func RegisterCustomerServiceHandler(s server.Server, hdlr CustomerServiceHandler, opts ...server.HandlerOption) error {
	type customerService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
	}
	type CustomerService struct {
		customerService
	}
	h := &customerServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CustomerService.Register",
		Path:    []string{"/api/v1/user/register"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CustomerService.Login",
		Path:    []string{"/api/v1/user/login"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&CustomerService{h}, opts...))
}

type customerServiceHandler struct {
	CustomerServiceHandler
}

func (h *customerServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.CustomerServiceHandler.Register(ctx, in, out)
}

func (h *customerServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.CustomerServiceHandler.Login(ctx, in, out)
}

// Api Endpoints for CheckMobileService service

func NewCheckMobileServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "CheckMobileService.CheckMobile",
			Path:    []string{"/api/v1/user/checkMobile"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for CheckMobileService service

type CheckMobileService interface {
	// 检查手机号码是否已注册
	CheckMobile(ctx context.Context, in *CheckMobileRequest, opts ...client.CallOption) (*CheckMobileRequest, error)
}

type checkMobileService struct {
	c    client.Client
	name string
}

func NewCheckMobileService(name string, c client.Client) CheckMobileService {
	return &checkMobileService{
		c:    c,
		name: name,
	}
}

func (c *checkMobileService) CheckMobile(ctx context.Context, in *CheckMobileRequest, opts ...client.CallOption) (*CheckMobileRequest, error) {
	req := c.c.NewRequest(c.name, "CheckMobileService.CheckMobile", in)
	out := new(CheckMobileRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckMobileService service

type CheckMobileServiceHandler interface {
	// 检查手机号码是否已注册
	CheckMobile(context.Context, *CheckMobileRequest, *CheckMobileRequest) error
}

func RegisterCheckMobileServiceHandler(s server.Server, hdlr CheckMobileServiceHandler, opts ...server.HandlerOption) error {
	type checkMobileService interface {
		CheckMobile(ctx context.Context, in *CheckMobileRequest, out *CheckMobileRequest) error
	}
	type CheckMobileService struct {
		checkMobileService
	}
	h := &checkMobileServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CheckMobileService.CheckMobile",
		Path:    []string{"/api/v1/user/checkMobile"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&CheckMobileService{h}, opts...))
}

type checkMobileServiceHandler struct {
	CheckMobileServiceHandler
}

func (h *checkMobileServiceHandler) CheckMobile(ctx context.Context, in *CheckMobileRequest, out *CheckMobileRequest) error {
	return h.CheckMobileServiceHandler.CheckMobile(ctx, in, out)
}
